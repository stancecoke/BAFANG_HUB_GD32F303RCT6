   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"gd32f30x_misc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.nvic_priority_group_set,"ax",%progbits
  16              		.align	1
  17              		.global	nvic_priority_group_set
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	nvic_priority_group_set:
  25              	.LFB116:
  26              		.file 1 "../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c"
   1:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
   2:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \file    gd32f30x_misc.c
   3:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief   MISC driver
   4:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
   5:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****    \version 2024-12-20, V3.0.1, firmware for GD32F30x
   6:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
   7:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
   8:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*
   9:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     Copyright (c) 2024, GigaDevice Semiconductor Inc.
  10:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
  11:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     Redistribution and use in source and binary forms, with or without modification, 
  12:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** are permitted provided that the following conditions are met:
  13:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
  14:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     1. Redistributions of source code must retain the above copyright notice, this 
  15:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****        list of conditions and the following disclaimer.
  16:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     2. Redistributions in binary form must reproduce the above copyright notice, 
  17:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****        this list of conditions and the following disclaimer in the documentation 
  18:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****        and/or other materials provided with the distribution.
  19:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     3. Neither the name of the copyright holder nor the names of its contributors 
  20:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****        may be used to endorse or promote products derived from this software without 
  21:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****        specific prior written permission.
  22:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
  23:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  24:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  25:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  26:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  27:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  28:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  29:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  30:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
  32:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** OF SUCH DAMAGE.
  33:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
  34:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
  35:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** #include "gd32f30x_misc.h"
  36:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
  37:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
  38:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief      set the priority group
  39:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  nvic_prigroup: the NVIC priority group
  40:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        NVIC_PRIGROUP_PRE0_SUB4:0 bits for pre-emption priority 4 bits for subpriority
  41:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        NVIC_PRIGROUP_PRE1_SUB3:1 bits for pre-emption priority 3 bits for subpriority
  42:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        NVIC_PRIGROUP_PRE2_SUB2:2 bits for pre-emption priority 2 bits for subpriority
  43:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        NVIC_PRIGROUP_PRE3_SUB1:3 bits for pre-emption priority 1 bits for subpriority
  44:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        NVIC_PRIGROUP_PRE4_SUB0:4 bits for pre-emption priority 0 bits for subpriority
  45:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[out] none
  46:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \retval     none
  47:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
  48:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** void nvic_priority_group_set(uint32_t nvic_prigroup)
  49:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** {
  27              		.loc 1 49 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  50:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     /* set the priority group value */
  51:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     SCB->AIRCR = NVIC_AIRCR_VECTKEY_MASK | nvic_prigroup;
  40              		.loc 1 51 8
  41 0008 054A     		ldr	r2, .L2
  42              		.loc 1 51 42
  43 000a 7B68     		ldr	r3, [r7, #4]
  44 000c 43F0BF63 		orr	r3, r3, #100139008
  45 0010 43F40033 		orr	r3, r3, #131072
  46              		.loc 1 51 16
  47 0014 D360     		str	r3, [r2, #12]
  52:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** }
  48              		.loc 1 52 1
  49 0016 00BF     		nop
  50 0018 0C37     		adds	r7, r7, #12
  51              		.cfi_def_cfa_offset 4
  52 001a BD46     		mov	sp, r7
  53              		.cfi_def_cfa_register 13
  54              		@ sp needed
  55 001c 80BC     		pop	{r7}
  56              		.cfi_restore 7
  57              		.cfi_def_cfa_offset 0
  58 001e 7047     		bx	lr
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0020 00ED00E0 		.word	-536810240
  63              		.cfi_endproc
  64              	.LFE116:
  66              		.section	.text.nvic_irq_enable,"ax",%progbits
  67              		.align	1
  68              		.global	nvic_irq_enable
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu softvfp
  74              	nvic_irq_enable:
  75              	.LFB117:
  53:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
  54:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
  55:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief      enable NVIC request
  56:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  nvic_irq: the NVIC interrupt request, detailed in IRQn_Type
  57:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  nvic_irq_pre_priority: the pre-emption priority needed to set
  58:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  nvic_irq_sub_priority: the subpriority needed to set
  59:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[out] none
  60:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \retval     none
  61:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
  62:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** void nvic_irq_enable(IRQn_Type nvic_irq, uint8_t nvic_irq_pre_priority, 
  63:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****                      uint8_t nvic_irq_sub_priority)
  64:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** {
  76              		.loc 1 64 1
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 24
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 0002 86B0     		sub	sp, sp, #24
  85              		.cfi_def_cfa_offset 32
  86 0004 00AF     		add	r7, sp, #0
  87              		.cfi_def_cfa_register 7
  88 0006 0346     		mov	r3, r0
  89 0008 FB71     		strb	r3, [r7, #7]
  90 000a 0B46     		mov	r3, r1
  91 000c BB71     		strb	r3, [r7, #6]
  92 000e 1346     		mov	r3, r2
  93 0010 7B71     		strb	r3, [r7, #5]
  65:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     uint32_t temp_priority = 0x00U, temp_pre = 0x00U, temp_sub = 0x00U;
  94              		.loc 1 65 14
  95 0012 0023     		movs	r3, #0
  96 0014 FB60     		str	r3, [r7, #12]
  97              		.loc 1 65 37
  98 0016 0023     		movs	r3, #0
  99 0018 7B61     		str	r3, [r7, #20]
 100              		.loc 1 65 55
 101 001a 0023     		movs	r3, #0
 102 001c 3B61     		str	r3, [r7, #16]
  66:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     /* use the priority group value to get the temp_pre and the temp_sub */
  67:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     if(((SCB->AIRCR) & (uint32_t)0x700U)==NVIC_PRIGROUP_PRE0_SUB4){
 103              		.loc 1 67 13
 104 001e 3A4B     		ldr	r3, .L11
 105 0020 DB68     		ldr	r3, [r3, #12]
 106              		.loc 1 67 22
 107 0022 03F4E063 		and	r3, r3, #1792
 108              		.loc 1 67 7
 109 0026 B3F5E06F 		cmp	r3, #1792
 110 002a 04D1     		bne	.L5
  68:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_pre=0U;
 111              		.loc 1 68 17
 112 002c 0023     		movs	r3, #0
 113 002e 7B61     		str	r3, [r7, #20]
  69:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_sub=0x4U;
 114              		.loc 1 69 17
 115 0030 0423     		movs	r3, #4
 116 0032 3B61     		str	r3, [r7, #16]
 117 0034 37E0     		b	.L6
 118              	.L5:
  70:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }else if(((SCB->AIRCR) & (uint32_t)0x700U)==NVIC_PRIGROUP_PRE1_SUB3){
 119              		.loc 1 70 19
 120 0036 344B     		ldr	r3, .L11
 121 0038 DB68     		ldr	r3, [r3, #12]
 122              		.loc 1 70 28
 123 003a 03F4E063 		and	r3, r3, #1792
 124              		.loc 1 70 13
 125 003e B3F5C06F 		cmp	r3, #1536
 126 0042 04D1     		bne	.L7
  71:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_pre=1U;
 127              		.loc 1 71 17
 128 0044 0123     		movs	r3, #1
 129 0046 7B61     		str	r3, [r7, #20]
  72:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_sub=0x3U;
 130              		.loc 1 72 17
 131 0048 0323     		movs	r3, #3
 132 004a 3B61     		str	r3, [r7, #16]
 133 004c 2BE0     		b	.L6
 134              	.L7:
  73:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }else if(((SCB->AIRCR) & (uint32_t)0x700U)==NVIC_PRIGROUP_PRE2_SUB2){
 135              		.loc 1 73 19
 136 004e 2E4B     		ldr	r3, .L11
 137 0050 DB68     		ldr	r3, [r3, #12]
 138              		.loc 1 73 28
 139 0052 03F4E063 		and	r3, r3, #1792
 140              		.loc 1 73 13
 141 0056 B3F5A06F 		cmp	r3, #1280
 142 005a 04D1     		bne	.L8
  74:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_pre=2U;
 143              		.loc 1 74 17
 144 005c 0223     		movs	r3, #2
 145 005e 7B61     		str	r3, [r7, #20]
  75:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_sub=0x2U;
 146              		.loc 1 75 17
 147 0060 0223     		movs	r3, #2
 148 0062 3B61     		str	r3, [r7, #16]
 149 0064 1FE0     		b	.L6
 150              	.L8:
  76:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }else if(((SCB->AIRCR) & (uint32_t)0x700U)==NVIC_PRIGROUP_PRE3_SUB1){
 151              		.loc 1 76 19
 152 0066 284B     		ldr	r3, .L11
 153 0068 DB68     		ldr	r3, [r3, #12]
 154              		.loc 1 76 28
 155 006a 03F4E063 		and	r3, r3, #1792
 156              		.loc 1 76 13
 157 006e B3F5806F 		cmp	r3, #1024
 158 0072 04D1     		bne	.L9
  77:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_pre=3U;
 159              		.loc 1 77 17
 160 0074 0323     		movs	r3, #3
 161 0076 7B61     		str	r3, [r7, #20]
  78:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_sub=0x1U;
 162              		.loc 1 78 17
 163 0078 0123     		movs	r3, #1
 164 007a 3B61     		str	r3, [r7, #16]
 165 007c 13E0     		b	.L6
 166              	.L9:
  79:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }else if(((SCB->AIRCR) & (uint32_t)0x700U)==NVIC_PRIGROUP_PRE4_SUB0){
 167              		.loc 1 79 19
 168 007e 224B     		ldr	r3, .L11
 169 0080 DB68     		ldr	r3, [r3, #12]
 170              		.loc 1 79 28
 171 0082 03F4E063 		and	r3, r3, #1792
 172              		.loc 1 79 13
 173 0086 B3F5407F 		cmp	r3, #768
 174 008a 04D1     		bne	.L10
  80:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_pre=4U;
 175              		.loc 1 80 17
 176 008c 0423     		movs	r3, #4
 177 008e 7B61     		str	r3, [r7, #20]
  81:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_sub=0x0U;
 178              		.loc 1 81 17
 179 0090 0023     		movs	r3, #0
 180 0092 3B61     		str	r3, [r7, #16]
 181 0094 07E0     		b	.L6
 182              	.L10:
  82:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }else{
  83:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         nvic_priority_group_set(NVIC_PRIGROUP_PRE2_SUB2);
 183              		.loc 1 83 9
 184 0096 4FF4A060 		mov	r0, #1280
 185 009a FFF7FEFF 		bl	nvic_priority_group_set
  84:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_pre=2U;
 186              		.loc 1 84 17
 187 009e 0223     		movs	r3, #2
 188 00a0 7B61     		str	r3, [r7, #20]
  85:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         temp_sub=0x2U;
 189              		.loc 1 85 17
 190 00a2 0223     		movs	r3, #2
 191 00a4 3B61     		str	r3, [r7, #16]
 192              	.L6:
  86:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }
  87:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     /* get the temp_priority to fill the NVIC->IP register */
  88:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     temp_priority = (uint32_t)nvic_irq_pre_priority << (0x4U - temp_pre);
 193              		.loc 1 88 21
 194 00a6 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 195              		.loc 1 88 62
 196 00a8 7B69     		ldr	r3, [r7, #20]
 197 00aa C3F10403 		rsb	r3, r3, #4
 198              		.loc 1 88 19
 199 00ae 02FA03F3 		lsl	r3, r2, r3
 200 00b2 FB60     		str	r3, [r7, #12]
  89:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     temp_priority |= nvic_irq_sub_priority &(0x0FU >> (0x4U - temp_sub));
 201              		.loc 1 89 44
 202 00b4 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 203              		.loc 1 89 61
 204 00b6 3B69     		ldr	r3, [r7, #16]
 205 00b8 C3F10403 		rsb	r3, r3, #4
 206              		.loc 1 89 52
 207 00bc 0F21     		movs	r1, #15
 208 00be 21FA03F3 		lsr	r3, r1, r3
 209              		.loc 1 89 44
 210 00c2 1340     		ands	r3, r3, r2
 211              		.loc 1 89 19
 212 00c4 FA68     		ldr	r2, [r7, #12]
 213 00c6 1343     		orrs	r3, r3, r2
 214 00c8 FB60     		str	r3, [r7, #12]
  90:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     temp_priority = temp_priority << 0x04U;
 215              		.loc 1 90 19
 216 00ca FB68     		ldr	r3, [r7, #12]
 217 00cc 1B01     		lsls	r3, r3, #4
 218 00ce FB60     		str	r3, [r7, #12]
  91:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     NVIC->IP[nvic_irq] = (uint8_t)temp_priority;
 219              		.loc 1 91 9
 220 00d0 0E4A     		ldr	r2, .L11+4
 221              		.loc 1 91 13
 222 00d2 97F90730 		ldrsb	r3, [r7, #7]
 223              		.loc 1 91 26
 224 00d6 F968     		ldr	r1, [r7, #12]
 225 00d8 C9B2     		uxtb	r1, r1
 226              		.loc 1 91 24
 227 00da 1344     		add	r3, r3, r2
 228 00dc 0A46     		mov	r2, r1
 229 00de 83F80023 		strb	r2, [r3, #768]
  92:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     /* enable the selected IRQ */
  93:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     NVIC->ISER[nvic_irq >> 0x05U] = (uint32_t)0x01U << (nvic_irq & (uint8_t)0x1FU);
 230              		.loc 1 93 66
 231 00e2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 232 00e4 03F01F03 		and	r3, r3, #31
 233              		.loc 1 93 9
 234 00e8 0849     		ldr	r1, .L11+4
 235              		.loc 1 93 25
 236 00ea 97F90720 		ldrsb	r2, [r7, #7]
 237 00ee 5211     		asrs	r2, r2, #5
 238 00f0 52B2     		sxtb	r2, r2
 239 00f2 1046     		mov	r0, r2
 240              		.loc 1 93 53
 241 00f4 0122     		movs	r2, #1
 242 00f6 02FA03F3 		lsl	r3, r2, r3
 243              		.loc 1 93 35
 244 00fa 41F82030 		str	r3, [r1, r0, lsl #2]
  94:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** }
 245              		.loc 1 94 1
 246 00fe 00BF     		nop
 247 0100 1837     		adds	r7, r7, #24
 248              		.cfi_def_cfa_offset 8
 249 0102 BD46     		mov	sp, r7
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0104 80BD     		pop	{r7, pc}
 253              	.L12:
 254 0106 00BF     		.align	2
 255              	.L11:
 256 0108 00ED00E0 		.word	-536810240
 257 010c 00E100E0 		.word	-536813312
 258              		.cfi_endproc
 259              	.LFE117:
 261              		.section	.text.nvic_irq_disable,"ax",%progbits
 262              		.align	1
 263              		.global	nvic_irq_disable
 264              		.syntax unified
 265              		.thumb
 266              		.thumb_func
 267              		.fpu softvfp
 269              	nvic_irq_disable:
 270              	.LFB118:
  95:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
  96:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
  97:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief      disable NVIC request
  98:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  nvic_irq: the NVIC interrupt request, detailed in IRQn_Type
  99:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[out] none
 100:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \retval     none
 101:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
 102:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** void nvic_irq_disable(IRQn_Type nvic_irq)
 103:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** {
 271              		.loc 1 103 1
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 8
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275              		@ link register save eliminated.
 276 0000 80B4     		push	{r7}
 277              		.cfi_def_cfa_offset 4
 278              		.cfi_offset 7, -4
 279 0002 83B0     		sub	sp, sp, #12
 280              		.cfi_def_cfa_offset 16
 281 0004 00AF     		add	r7, sp, #0
 282              		.cfi_def_cfa_register 7
 283 0006 0346     		mov	r3, r0
 284 0008 FB71     		strb	r3, [r7, #7]
 104:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     /* disable the selected IRQ.*/
 105:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     NVIC->ICER[nvic_irq >> 0x05] = (uint32_t)0x01 << (nvic_irq & (uint8_t)0x1F);
 285              		.loc 1 105 64
 286 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 287 000c 03F01F03 		and	r3, r3, #31
 288              		.loc 1 105 9
 289 0010 0849     		ldr	r1, .L14
 290              		.loc 1 105 25
 291 0012 97F90720 		ldrsb	r2, [r7, #7]
 292 0016 5211     		asrs	r2, r2, #5
 293 0018 52B2     		sxtb	r2, r2
 294 001a 1046     		mov	r0, r2
 295              		.loc 1 105 51
 296 001c 0122     		movs	r2, #1
 297 001e 9A40     		lsls	r2, r2, r3
 298              		.loc 1 105 34
 299 0020 00F12003 		add	r3, r0, #32
 300 0024 41F82320 		str	r2, [r1, r3, lsl #2]
 106:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** }
 301              		.loc 1 106 1
 302 0028 00BF     		nop
 303 002a 0C37     		adds	r7, r7, #12
 304              		.cfi_def_cfa_offset 4
 305 002c BD46     		mov	sp, r7
 306              		.cfi_def_cfa_register 13
 307              		@ sp needed
 308 002e 80BC     		pop	{r7}
 309              		.cfi_restore 7
 310              		.cfi_def_cfa_offset 0
 311 0030 7047     		bx	lr
 312              	.L15:
 313 0032 00BF     		.align	2
 314              	.L14:
 315 0034 00E100E0 		.word	-536813312
 316              		.cfi_endproc
 317              	.LFE118:
 319              		.section	.text.nvic_vector_table_set,"ax",%progbits
 320              		.align	1
 321              		.global	nvic_vector_table_set
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu softvfp
 327              	nvic_vector_table_set:
 328              	.LFB119:
 107:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
 108:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
 109:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief      set the NVIC vector table base address
 110:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  nvic_vict_tab: the RAM or FLASH base address
 111:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        NVIC_VECTTAB_RAM: RAM base address
 112:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \are        NVIC_VECTTAB_FLASH: Flash base address
 113:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  offset: Vector Table offset
 114:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[out] none
 115:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \retval     none
 116:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
 117:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** void nvic_vector_table_set(uint32_t nvic_vict_tab, uint32_t offset)
 118:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** {
 329              		.loc 1 118 1
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 334 0000 80B4     		push	{r7}
 335              		.cfi_def_cfa_offset 4
 336              		.cfi_offset 7, -4
 337 0002 83B0     		sub	sp, sp, #12
 338              		.cfi_def_cfa_offset 16
 339 0004 00AF     		add	r7, sp, #0
 340              		.cfi_def_cfa_register 7
 341 0006 7860     		str	r0, [r7, #4]
 342 0008 3960     		str	r1, [r7]
 119:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     SCB->VTOR = nvic_vict_tab | (offset & NVIC_VECTTAB_OFFSET_MASK);
 343              		.loc 1 119 41
 344 000a 3B68     		ldr	r3, [r7]
 345 000c 23F06043 		bic	r3, r3, #-536870912
 346 0010 23F07F03 		bic	r3, r3, #127
 347              		.loc 1 119 8
 348 0014 0549     		ldr	r1, .L17
 349              		.loc 1 119 31
 350 0016 7A68     		ldr	r2, [r7, #4]
 351 0018 1343     		orrs	r3, r3, r2
 352              		.loc 1 119 15
 353 001a 8B60     		str	r3, [r1, #8]
 354              	.LBB4:
 355              	.LBB5:
 356              		.file 2 "../Firmware/CMSIS/core_cmInstr.h"
   1:../Firmware/CMSIS/core_cmInstr.h **** /**************************************************************************//**
   2:../Firmware/CMSIS/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../Firmware/CMSIS/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../Firmware/CMSIS/core_cmInstr.h ****  * @version  V3.01
   5:../Firmware/CMSIS/core_cmInstr.h ****  * @date     06. March 2012
   6:../Firmware/CMSIS/core_cmInstr.h ****  *
   7:../Firmware/CMSIS/core_cmInstr.h ****  * @note
   8:../Firmware/CMSIS/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../Firmware/CMSIS/core_cmInstr.h ****  *
  10:../Firmware/CMSIS/core_cmInstr.h ****  * @par
  11:../Firmware/CMSIS/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../Firmware/CMSIS/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../Firmware/CMSIS/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../Firmware/CMSIS/core_cmInstr.h ****  *
  15:../Firmware/CMSIS/core_cmInstr.h ****  * @par
  16:../Firmware/CMSIS/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../Firmware/CMSIS/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../Firmware/CMSIS/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../Firmware/CMSIS/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../Firmware/CMSIS/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../Firmware/CMSIS/core_cmInstr.h ****  *
  22:../Firmware/CMSIS/core_cmInstr.h ****  ******************************************************************************/
  23:../Firmware/CMSIS/core_cmInstr.h **** 
  24:../Firmware/CMSIS/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../Firmware/CMSIS/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../Firmware/CMSIS/core_cmInstr.h **** 
  27:../Firmware/CMSIS/core_cmInstr.h **** 
  28:../Firmware/CMSIS/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../Firmware/CMSIS/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../Firmware/CMSIS/core_cmInstr.h ****   Access to dedicated instructions
  31:../Firmware/CMSIS/core_cmInstr.h ****   @{
  32:../Firmware/CMSIS/core_cmInstr.h **** */
  33:../Firmware/CMSIS/core_cmInstr.h **** 
  34:../Firmware/CMSIS/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../Firmware/CMSIS/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../Firmware/CMSIS/core_cmInstr.h **** 
  37:../Firmware/CMSIS/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../Firmware/CMSIS/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../Firmware/CMSIS/core_cmInstr.h **** #endif
  40:../Firmware/CMSIS/core_cmInstr.h **** 
  41:../Firmware/CMSIS/core_cmInstr.h **** 
  42:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  No Operation
  43:../Firmware/CMSIS/core_cmInstr.h **** 
  44:../Firmware/CMSIS/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../Firmware/CMSIS/core_cmInstr.h ****  */
  46:../Firmware/CMSIS/core_cmInstr.h **** #define __NOP                             __nop
  47:../Firmware/CMSIS/core_cmInstr.h **** 
  48:../Firmware/CMSIS/core_cmInstr.h **** 
  49:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../Firmware/CMSIS/core_cmInstr.h **** 
  51:../Firmware/CMSIS/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../Firmware/CMSIS/core_cmInstr.h ****     until one of a number of events occurs.
  53:../Firmware/CMSIS/core_cmInstr.h ****  */
  54:../Firmware/CMSIS/core_cmInstr.h **** #define __WFI                             __wfi
  55:../Firmware/CMSIS/core_cmInstr.h **** 
  56:../Firmware/CMSIS/core_cmInstr.h **** 
  57:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Wait For Event
  58:../Firmware/CMSIS/core_cmInstr.h **** 
  59:../Firmware/CMSIS/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../Firmware/CMSIS/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../Firmware/CMSIS/core_cmInstr.h ****  */
  62:../Firmware/CMSIS/core_cmInstr.h **** #define __WFE                             __wfe
  63:../Firmware/CMSIS/core_cmInstr.h **** 
  64:../Firmware/CMSIS/core_cmInstr.h **** 
  65:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Send Event
  66:../Firmware/CMSIS/core_cmInstr.h **** 
  67:../Firmware/CMSIS/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../Firmware/CMSIS/core_cmInstr.h ****  */
  69:../Firmware/CMSIS/core_cmInstr.h **** #define __SEV                             __sev
  70:../Firmware/CMSIS/core_cmInstr.h **** 
  71:../Firmware/CMSIS/core_cmInstr.h **** 
  72:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../Firmware/CMSIS/core_cmInstr.h **** 
  74:../Firmware/CMSIS/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../Firmware/CMSIS/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../Firmware/CMSIS/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../Firmware/CMSIS/core_cmInstr.h ****  */
  78:../Firmware/CMSIS/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../Firmware/CMSIS/core_cmInstr.h **** 
  80:../Firmware/CMSIS/core_cmInstr.h **** 
  81:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../Firmware/CMSIS/core_cmInstr.h **** 
  83:../Firmware/CMSIS/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../Firmware/CMSIS/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../Firmware/CMSIS/core_cmInstr.h ****  */
  86:../Firmware/CMSIS/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../Firmware/CMSIS/core_cmInstr.h **** 
  88:../Firmware/CMSIS/core_cmInstr.h **** 
  89:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../Firmware/CMSIS/core_cmInstr.h **** 
  91:../Firmware/CMSIS/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../Firmware/CMSIS/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../Firmware/CMSIS/core_cmInstr.h ****  */
  94:../Firmware/CMSIS/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../Firmware/CMSIS/core_cmInstr.h **** 
  96:../Firmware/CMSIS/core_cmInstr.h **** 
  97:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../Firmware/CMSIS/core_cmInstr.h **** 
  99:../Firmware/CMSIS/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../Firmware/CMSIS/core_cmInstr.h **** 
 101:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../Firmware/CMSIS/core_cmInstr.h ****     \return               Reversed value
 103:../Firmware/CMSIS/core_cmInstr.h ****  */
 104:../Firmware/CMSIS/core_cmInstr.h **** #define __REV                             __rev
 105:../Firmware/CMSIS/core_cmInstr.h **** 
 106:../Firmware/CMSIS/core_cmInstr.h **** 
 107:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../Firmware/CMSIS/core_cmInstr.h **** 
 109:../Firmware/CMSIS/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../Firmware/CMSIS/core_cmInstr.h **** 
 111:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../Firmware/CMSIS/core_cmInstr.h ****     \return               Reversed value
 113:../Firmware/CMSIS/core_cmInstr.h ****  */
 114:../Firmware/CMSIS/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../Firmware/CMSIS/core_cmInstr.h **** {
 116:../Firmware/CMSIS/core_cmInstr.h ****   rev16 r0, r0
 117:../Firmware/CMSIS/core_cmInstr.h ****   bx lr
 118:../Firmware/CMSIS/core_cmInstr.h **** }
 119:../Firmware/CMSIS/core_cmInstr.h **** 
 120:../Firmware/CMSIS/core_cmInstr.h **** 
 121:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../Firmware/CMSIS/core_cmInstr.h **** 
 123:../Firmware/CMSIS/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../Firmware/CMSIS/core_cmInstr.h **** 
 125:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../Firmware/CMSIS/core_cmInstr.h ****     \return               Reversed value
 127:../Firmware/CMSIS/core_cmInstr.h ****  */
 128:../Firmware/CMSIS/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../Firmware/CMSIS/core_cmInstr.h **** {
 130:../Firmware/CMSIS/core_cmInstr.h ****   revsh r0, r0
 131:../Firmware/CMSIS/core_cmInstr.h ****   bx lr
 132:../Firmware/CMSIS/core_cmInstr.h **** }
 133:../Firmware/CMSIS/core_cmInstr.h **** 
 134:../Firmware/CMSIS/core_cmInstr.h **** 
 135:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../Firmware/CMSIS/core_cmInstr.h **** 
 137:../Firmware/CMSIS/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../Firmware/CMSIS/core_cmInstr.h **** 
 139:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../Firmware/CMSIS/core_cmInstr.h ****     \return               Rotated value
 142:../Firmware/CMSIS/core_cmInstr.h ****  */
 143:../Firmware/CMSIS/core_cmInstr.h **** #define __ROR                             __ror
 144:../Firmware/CMSIS/core_cmInstr.h **** 
 145:../Firmware/CMSIS/core_cmInstr.h **** 
 146:../Firmware/CMSIS/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../Firmware/CMSIS/core_cmInstr.h **** 
 148:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../Firmware/CMSIS/core_cmInstr.h **** 
 150:../Firmware/CMSIS/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../Firmware/CMSIS/core_cmInstr.h **** 
 152:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../Firmware/CMSIS/core_cmInstr.h ****     \return               Reversed value
 154:../Firmware/CMSIS/core_cmInstr.h ****  */
 155:../Firmware/CMSIS/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../Firmware/CMSIS/core_cmInstr.h **** 
 157:../Firmware/CMSIS/core_cmInstr.h **** 
 158:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../Firmware/CMSIS/core_cmInstr.h **** 
 160:../Firmware/CMSIS/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../Firmware/CMSIS/core_cmInstr.h **** 
 162:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../Firmware/CMSIS/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../Firmware/CMSIS/core_cmInstr.h ****  */
 165:../Firmware/CMSIS/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../Firmware/CMSIS/core_cmInstr.h **** 
 167:../Firmware/CMSIS/core_cmInstr.h **** 
 168:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../Firmware/CMSIS/core_cmInstr.h **** 
 170:../Firmware/CMSIS/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../Firmware/CMSIS/core_cmInstr.h **** 
 172:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../Firmware/CMSIS/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../Firmware/CMSIS/core_cmInstr.h ****  */
 175:../Firmware/CMSIS/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../Firmware/CMSIS/core_cmInstr.h **** 
 177:../Firmware/CMSIS/core_cmInstr.h **** 
 178:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../Firmware/CMSIS/core_cmInstr.h **** 
 180:../Firmware/CMSIS/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../Firmware/CMSIS/core_cmInstr.h **** 
 182:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../Firmware/CMSIS/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../Firmware/CMSIS/core_cmInstr.h ****  */
 185:../Firmware/CMSIS/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../Firmware/CMSIS/core_cmInstr.h **** 
 187:../Firmware/CMSIS/core_cmInstr.h **** 
 188:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../Firmware/CMSIS/core_cmInstr.h **** 
 190:../Firmware/CMSIS/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../Firmware/CMSIS/core_cmInstr.h **** 
 192:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../Firmware/CMSIS/core_cmInstr.h ****     \return          0  Function succeeded
 195:../Firmware/CMSIS/core_cmInstr.h ****     \return          1  Function failed
 196:../Firmware/CMSIS/core_cmInstr.h ****  */
 197:../Firmware/CMSIS/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../Firmware/CMSIS/core_cmInstr.h **** 
 199:../Firmware/CMSIS/core_cmInstr.h **** 
 200:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../Firmware/CMSIS/core_cmInstr.h **** 
 202:../Firmware/CMSIS/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../Firmware/CMSIS/core_cmInstr.h **** 
 204:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../Firmware/CMSIS/core_cmInstr.h ****     \return          0  Function succeeded
 207:../Firmware/CMSIS/core_cmInstr.h ****     \return          1  Function failed
 208:../Firmware/CMSIS/core_cmInstr.h ****  */
 209:../Firmware/CMSIS/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../Firmware/CMSIS/core_cmInstr.h **** 
 211:../Firmware/CMSIS/core_cmInstr.h **** 
 212:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../Firmware/CMSIS/core_cmInstr.h **** 
 214:../Firmware/CMSIS/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../Firmware/CMSIS/core_cmInstr.h **** 
 216:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../Firmware/CMSIS/core_cmInstr.h ****     \return          0  Function succeeded
 219:../Firmware/CMSIS/core_cmInstr.h ****     \return          1  Function failed
 220:../Firmware/CMSIS/core_cmInstr.h ****  */
 221:../Firmware/CMSIS/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../Firmware/CMSIS/core_cmInstr.h **** 
 223:../Firmware/CMSIS/core_cmInstr.h **** 
 224:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../Firmware/CMSIS/core_cmInstr.h **** 
 226:../Firmware/CMSIS/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../Firmware/CMSIS/core_cmInstr.h **** 
 228:../Firmware/CMSIS/core_cmInstr.h ****  */
 229:../Firmware/CMSIS/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../Firmware/CMSIS/core_cmInstr.h **** 
 231:../Firmware/CMSIS/core_cmInstr.h **** 
 232:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../Firmware/CMSIS/core_cmInstr.h **** 
 234:../Firmware/CMSIS/core_cmInstr.h ****     This function saturates a signed value.
 235:../Firmware/CMSIS/core_cmInstr.h **** 
 236:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../Firmware/CMSIS/core_cmInstr.h ****     \return             Saturated value
 239:../Firmware/CMSIS/core_cmInstr.h ****  */
 240:../Firmware/CMSIS/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../Firmware/CMSIS/core_cmInstr.h **** 
 242:../Firmware/CMSIS/core_cmInstr.h **** 
 243:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../Firmware/CMSIS/core_cmInstr.h **** 
 245:../Firmware/CMSIS/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../Firmware/CMSIS/core_cmInstr.h **** 
 247:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../Firmware/CMSIS/core_cmInstr.h ****     \return             Saturated value
 250:../Firmware/CMSIS/core_cmInstr.h ****  */
 251:../Firmware/CMSIS/core_cmInstr.h **** #define __USAT                            __usat
 252:../Firmware/CMSIS/core_cmInstr.h **** 
 253:../Firmware/CMSIS/core_cmInstr.h **** 
 254:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../Firmware/CMSIS/core_cmInstr.h **** 
 256:../Firmware/CMSIS/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../Firmware/CMSIS/core_cmInstr.h **** 
 258:../Firmware/CMSIS/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../Firmware/CMSIS/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../Firmware/CMSIS/core_cmInstr.h ****  */
 261:../Firmware/CMSIS/core_cmInstr.h **** #define __CLZ                             __clz
 262:../Firmware/CMSIS/core_cmInstr.h **** 
 263:../Firmware/CMSIS/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../Firmware/CMSIS/core_cmInstr.h **** 
 265:../Firmware/CMSIS/core_cmInstr.h **** 
 266:../Firmware/CMSIS/core_cmInstr.h **** 
 267:../Firmware/CMSIS/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../Firmware/CMSIS/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../Firmware/CMSIS/core_cmInstr.h **** 
 270:../Firmware/CMSIS/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../Firmware/CMSIS/core_cmInstr.h **** 
 272:../Firmware/CMSIS/core_cmInstr.h **** 
 273:../Firmware/CMSIS/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../Firmware/CMSIS/core_cmInstr.h **** /* TI CCS specific functions */
 275:../Firmware/CMSIS/core_cmInstr.h **** 
 276:../Firmware/CMSIS/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../Firmware/CMSIS/core_cmInstr.h **** 
 278:../Firmware/CMSIS/core_cmInstr.h **** 
 279:../Firmware/CMSIS/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../Firmware/CMSIS/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../Firmware/CMSIS/core_cmInstr.h **** 
 282:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  No Operation
 283:../Firmware/CMSIS/core_cmInstr.h **** 
 284:../Firmware/CMSIS/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../Firmware/CMSIS/core_cmInstr.h ****  */
 286:../Firmware/CMSIS/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:../Firmware/CMSIS/core_cmInstr.h **** {
 288:../Firmware/CMSIS/core_cmInstr.h ****   __ASM volatile ("nop");
 289:../Firmware/CMSIS/core_cmInstr.h **** }
 290:../Firmware/CMSIS/core_cmInstr.h **** 
 291:../Firmware/CMSIS/core_cmInstr.h **** 
 292:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../Firmware/CMSIS/core_cmInstr.h **** 
 294:../Firmware/CMSIS/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../Firmware/CMSIS/core_cmInstr.h ****     until one of a number of events occurs.
 296:../Firmware/CMSIS/core_cmInstr.h ****  */
 297:../Firmware/CMSIS/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:../Firmware/CMSIS/core_cmInstr.h **** {
 299:../Firmware/CMSIS/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:../Firmware/CMSIS/core_cmInstr.h **** }
 301:../Firmware/CMSIS/core_cmInstr.h **** 
 302:../Firmware/CMSIS/core_cmInstr.h **** 
 303:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Wait For Event
 304:../Firmware/CMSIS/core_cmInstr.h **** 
 305:../Firmware/CMSIS/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../Firmware/CMSIS/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../Firmware/CMSIS/core_cmInstr.h ****  */
 308:../Firmware/CMSIS/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:../Firmware/CMSIS/core_cmInstr.h **** {
 310:../Firmware/CMSIS/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:../Firmware/CMSIS/core_cmInstr.h **** }
 312:../Firmware/CMSIS/core_cmInstr.h **** 
 313:../Firmware/CMSIS/core_cmInstr.h **** 
 314:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Send Event
 315:../Firmware/CMSIS/core_cmInstr.h **** 
 316:../Firmware/CMSIS/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../Firmware/CMSIS/core_cmInstr.h ****  */
 318:../Firmware/CMSIS/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:../Firmware/CMSIS/core_cmInstr.h **** {
 320:../Firmware/CMSIS/core_cmInstr.h ****   __ASM volatile ("sev");
 321:../Firmware/CMSIS/core_cmInstr.h **** }
 322:../Firmware/CMSIS/core_cmInstr.h **** 
 323:../Firmware/CMSIS/core_cmInstr.h **** 
 324:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:../Firmware/CMSIS/core_cmInstr.h **** 
 326:../Firmware/CMSIS/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:../Firmware/CMSIS/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:../Firmware/CMSIS/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:../Firmware/CMSIS/core_cmInstr.h ****  */
 330:../Firmware/CMSIS/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:../Firmware/CMSIS/core_cmInstr.h **** {
 332:../Firmware/CMSIS/core_cmInstr.h ****   __ASM volatile ("isb");
 333:../Firmware/CMSIS/core_cmInstr.h **** }
 334:../Firmware/CMSIS/core_cmInstr.h **** 
 335:../Firmware/CMSIS/core_cmInstr.h **** 
 336:../Firmware/CMSIS/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:../Firmware/CMSIS/core_cmInstr.h **** 
 338:../Firmware/CMSIS/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:../Firmware/CMSIS/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:../Firmware/CMSIS/core_cmInstr.h ****  */
 341:../Firmware/CMSIS/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:../Firmware/CMSIS/core_cmInstr.h **** {
 343:../Firmware/CMSIS/core_cmInstr.h ****   __ASM volatile ("dsb");
 357              		.loc 2 343 3
 358              		.syntax unified
 359              	@ 343 "../Firmware/CMSIS/core_cmInstr.h" 1
 360 001c BFF34F8F 		dsb
 361              	@ 0 "" 2
 344:../Firmware/CMSIS/core_cmInstr.h **** }
 362              		.loc 2 344 1
 363              		.thumb
 364              		.syntax unified
 365 0020 00BF     		nop
 366              	.LBE5:
 367              	.LBE4:
 120:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     __DSB();
 121:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** }
 368              		.loc 1 121 1
 369 0022 00BF     		nop
 370 0024 0C37     		adds	r7, r7, #12
 371              		.cfi_def_cfa_offset 4
 372 0026 BD46     		mov	sp, r7
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 0028 80BC     		pop	{r7}
 376              		.cfi_restore 7
 377              		.cfi_def_cfa_offset 0
 378 002a 7047     		bx	lr
 379              	.L18:
 380              		.align	2
 381              	.L17:
 382 002c 00ED00E0 		.word	-536810240
 383              		.cfi_endproc
 384              	.LFE119:
 386              		.section	.text.system_lowpower_set,"ax",%progbits
 387              		.align	1
 388              		.global	system_lowpower_set
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu softvfp
 394              	system_lowpower_set:
 395              	.LFB120:
 122:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
 123:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
 124:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief      set the state of the low power mode
 125:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  lowpower_mode: the low power mode state
 126:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SCB_LPM_SLEEP_EXIT_ISR: if chose this para, the system always enter low power 
 127:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****                     mode by exiting from ISR
 128:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SCB_LPM_DEEPSLEEP: if chose this para, the system will enter the DEEPSLEEP mode
 129:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SCB_LPM_WAKE_BY_ALL_INT: if chose this para, the lowpower mode can be woke up 
 130:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****                     by all the enable and disable interrupts
 131:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[out] none
 132:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \retval     none
 133:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
 134:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** void system_lowpower_set(uint8_t lowpower_mode)
 135:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** {
 396              		.loc 1 135 1
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 8
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401 0000 80B4     		push	{r7}
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 0002 83B0     		sub	sp, sp, #12
 405              		.cfi_def_cfa_offset 16
 406 0004 00AF     		add	r7, sp, #0
 407              		.cfi_def_cfa_register 7
 408 0006 0346     		mov	r3, r0
 409 0008 FB71     		strb	r3, [r7, #7]
 136:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     SCB->SCR |= (uint32_t)lowpower_mode;
 410              		.loc 1 136 14
 411 000a 054B     		ldr	r3, .L20
 412 000c 1A69     		ldr	r2, [r3, #16]
 413              		.loc 1 136 17
 414 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 415              		.loc 1 136 14
 416 0010 0349     		ldr	r1, .L20
 417 0012 1343     		orrs	r3, r3, r2
 418 0014 0B61     		str	r3, [r1, #16]
 137:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** }
 419              		.loc 1 137 1
 420 0016 00BF     		nop
 421 0018 0C37     		adds	r7, r7, #12
 422              		.cfi_def_cfa_offset 4
 423 001a BD46     		mov	sp, r7
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 001c 80BC     		pop	{r7}
 427              		.cfi_restore 7
 428              		.cfi_def_cfa_offset 0
 429 001e 7047     		bx	lr
 430              	.L21:
 431              		.align	2
 432              	.L20:
 433 0020 00ED00E0 		.word	-536810240
 434              		.cfi_endproc
 435              	.LFE120:
 437              		.section	.text.system_lowpower_reset,"ax",%progbits
 438              		.align	1
 439              		.global	system_lowpower_reset
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu softvfp
 445              	system_lowpower_reset:
 446              	.LFB121:
 138:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
 139:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
 140:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief      reset the state of the low power mode
 141:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  lowpower_mode: the low power mode state
 142:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SCB_LPM_SLEEP_EXIT_ISR: if chose this para, the system will exit low power 
 143:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****                     mode by exiting from ISR
 144:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SCB_LPM_DEEPSLEEP: if chose this para, the system will enter the SLEEP mode
 145:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SCB_LPM_WAKE_BY_ALL_INT: if chose this para, the lowpower mode only can be 
 146:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****                     woke up by the enable interrupts
 147:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[out] none
 148:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \retval     none
 149:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
 150:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** void system_lowpower_reset(uint8_t lowpower_mode)
 151:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** {
 447              		.loc 1 151 1
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 0000 80B4     		push	{r7}
 453              		.cfi_def_cfa_offset 4
 454              		.cfi_offset 7, -4
 455 0002 83B0     		sub	sp, sp, #12
 456              		.cfi_def_cfa_offset 16
 457 0004 00AF     		add	r7, sp, #0
 458              		.cfi_def_cfa_register 7
 459 0006 0346     		mov	r3, r0
 460 0008 FB71     		strb	r3, [r7, #7]
 152:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     SCB->SCR &= (~(uint32_t)lowpower_mode);
 461              		.loc 1 152 14
 462 000a 064B     		ldr	r3, .L23
 463 000c 1A69     		ldr	r2, [r3, #16]
 464              		.loc 1 152 19
 465 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 466              		.loc 1 152 18
 467 0010 DB43     		mvns	r3, r3
 468              		.loc 1 152 14
 469 0012 0449     		ldr	r1, .L23
 470 0014 1340     		ands	r3, r3, r2
 471 0016 0B61     		str	r3, [r1, #16]
 153:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** }
 472              		.loc 1 153 1
 473 0018 00BF     		nop
 474 001a 0C37     		adds	r7, r7, #12
 475              		.cfi_def_cfa_offset 4
 476 001c BD46     		mov	sp, r7
 477              		.cfi_def_cfa_register 13
 478              		@ sp needed
 479 001e 80BC     		pop	{r7}
 480              		.cfi_restore 7
 481              		.cfi_def_cfa_offset 0
 482 0020 7047     		bx	lr
 483              	.L24:
 484 0022 00BF     		.align	2
 485              	.L23:
 486 0024 00ED00E0 		.word	-536810240
 487              		.cfi_endproc
 488              	.LFE121:
 490              		.section	.text.systick_clksource_set,"ax",%progbits
 491              		.align	1
 492              		.global	systick_clksource_set
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 496              		.fpu softvfp
 498              	systick_clksource_set:
 499              	.LFB122:
 154:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
 155:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** /*!
 156:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \brief      set the systick clock source
 157:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[in]  systick_clksource: the systick clock source needed to choose
 158:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SYSTICK_CLKSOURCE_HCLK: systick clock source is from HCLK
 159:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****       \arg        SYSTICK_CLKSOURCE_HCLK_DIV8: systick clock source is from HCLK/8
 160:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \param[out] none
 161:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     \retval     none
 162:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** */
 163:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** 
 164:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** void systick_clksource_set(uint32_t systick_clksource)
 165:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** {
 500              		.loc 1 165 1
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 8
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504              		@ link register save eliminated.
 505 0000 80B4     		push	{r7}
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
 508 0002 83B0     		sub	sp, sp, #12
 509              		.cfi_def_cfa_offset 16
 510 0004 00AF     		add	r7, sp, #0
 511              		.cfi_def_cfa_register 7
 512 0006 7860     		str	r0, [r7, #4]
 166:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     if(SYSTICK_CLKSOURCE_HCLK == systick_clksource ){
 513              		.loc 1 166 7
 514 0008 7B68     		ldr	r3, [r7, #4]
 515 000a 042B     		cmp	r3, #4
 516 000c 06D1     		bne	.L26
 167:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         /* set the systick clock source from HCLK */
 168:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 517              		.loc 1 168 23
 518 000e 094B     		ldr	r3, .L29
 519 0010 1B68     		ldr	r3, [r3]
 520 0012 084A     		ldr	r2, .L29
 521 0014 43F00403 		orr	r3, r3, #4
 522 0018 1360     		str	r3, [r2]
 169:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }else{
 170:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         /* set the systick clock source from HCLK/8 */
 171:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****         SysTick->CTRL &= SYSTICK_CLKSOURCE_HCLK_DIV8;
 172:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }
 173:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c **** }
 523              		.loc 1 173 1
 524 001a 05E0     		b	.L28
 525              	.L26:
 171:../Firmware/GD32F30x_standard_peripheral/Source/gd32f30x_misc.c ****     }
 526              		.loc 1 171 23
 527 001c 054B     		ldr	r3, .L29
 528 001e 1B68     		ldr	r3, [r3]
 529 0020 044A     		ldr	r2, .L29
 530 0022 23F00403 		bic	r3, r3, #4
 531 0026 1360     		str	r3, [r2]
 532              	.L28:
 533              		.loc 1 173 1
 534 0028 00BF     		nop
 535 002a 0C37     		adds	r7, r7, #12
 536              		.cfi_def_cfa_offset 4
 537 002c BD46     		mov	sp, r7
 538              		.cfi_def_cfa_register 13
 539              		@ sp needed
 540 002e 80BC     		pop	{r7}
 541              		.cfi_restore 7
 542              		.cfi_def_cfa_offset 0
 543 0030 7047     		bx	lr
 544              	.L30:
 545 0032 00BF     		.align	2
 546              	.L29:
 547 0034 10E000E0 		.word	-536813552
 548              		.cfi_endproc
 549              	.LFE122:
 551              		.text
 552              	.Letext0:
 553              		.file 3 "../Firmware/CMSIS/GD/GD32F30x/Include/gd32f30x.h"
 554              		.file 4 "c:\\gd32embeddedbuilder_1.5.3.31964\\gd32embeddedbuilder_1.5.3.31964\\tools\\gnu tools ar
 555              		.file 5 "c:\\gd32embeddedbuilder_1.5.3.31964\\gd32embeddedbuilder_1.5.3.31964\\tools\\gnu tools ar
 556              		.file 6 "../Firmware/CMSIS/core_cm4.h"
 557              		.file 7 "../Firmware/CMSIS/GD/GD32F30x/Include/system_gd32f30x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 gd32f30x_misc.c
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:16     .text.nvic_priority_group_set:00000000 $t
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:24     .text.nvic_priority_group_set:00000000 nvic_priority_group_set
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:62     .text.nvic_priority_group_set:00000020 $d
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:67     .text.nvic_irq_enable:00000000 $t
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:74     .text.nvic_irq_enable:00000000 nvic_irq_enable
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:256    .text.nvic_irq_enable:00000108 $d
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:262    .text.nvic_irq_disable:00000000 $t
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:269    .text.nvic_irq_disable:00000000 nvic_irq_disable
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:315    .text.nvic_irq_disable:00000034 $d
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:320    .text.nvic_vector_table_set:00000000 $t
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:327    .text.nvic_vector_table_set:00000000 nvic_vector_table_set
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:382    .text.nvic_vector_table_set:0000002c $d
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:387    .text.system_lowpower_set:00000000 $t
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:394    .text.system_lowpower_set:00000000 system_lowpower_set
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:433    .text.system_lowpower_set:00000020 $d
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:438    .text.system_lowpower_reset:00000000 $t
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:445    .text.system_lowpower_reset:00000000 system_lowpower_reset
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:486    .text.system_lowpower_reset:00000024 $d
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:491    .text.systick_clksource_set:00000000 $t
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:498    .text.systick_clksource_set:00000000 systick_clksource_set
C:\Users\gaswerke\AppData\Local\Temp\cclk7p8v.s:547    .text.systick_clksource_set:00000034 $d
                           .group:00000000 wm4.0.0b2cbd0a579afdcbc37120f4ceb86892
                           .group:00000000 wm4.gd32f30x.h.39.a203e36f89dbb1753b66e1e665732b11
                           .group:00000000 wm4.core_cm4.h.47.434d5634a5df7142236685d6945e71d7
                           .group:00000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.43.bf657009d9c246d6ac6e7b120cdd899a
                           .group:00000000 wm4.core_cm4.h.196.6f0a9ac4bbc7fecc10f22e6a71f29e52
                           .group:00000000 wm4.system_gd32f30x.h.38.120525a84dcd3d76a4734e6bcde7b49c
                           .group:00000000 wm4.gd32f30x.h.294.5e6753de52124d3e3ab34f8aafd628cc
                           .group:00000000 wm4.gd32f30x_rcu.h.41.eb7011467c51e1274d4ea5dfbe3b7403
                           .group:00000000 wm4.gd32f30x_adc.h.36.124b47377c29d63ea85a6515ff99e7d0
                           .group:00000000 wm4.gd32f30x_can.h.36.85eb2b9bdffce148e9f2cf53e35a47f8
                           .group:00000000 wm4.gd32f30x_crc.h.36.3e50e7397bf79ecca0d280169ab2b7e1
                           .group:00000000 wm4.gd32f30x_ctc.h.36.42aeab0e42f8a7b6cc58608cdc08a712
                           .group:00000000 wm4.gd32f30x_dac.h.36.f867e713911fc6770d5f38223b88a122
                           .group:00000000 wm4.gd32f30x_dbg.h.36.4d3777753862ded915f1f9e71f4c290a
                           .group:00000000 wm4.gd32f30x_dma.h.36.00aa3536820feed4ebeab0c0060e7723
                           .group:00000000 wm4.gd32f30x_exti.h.36.64affc4e75ae7f53393e90b0bfc38f38
                           .group:00000000 wm4.gd32f30x_fmc.h.37.17b3f65aacec1755989aca30031b6a7c
                           .group:00000000 wm4.gd32f30x_fwdgt.h.36.1e7c1bfe259ede52150f5b1c58591a95
                           .group:00000000 wm4.gd32f30x_gpio.h.36.faffc48a681d1163918cf519d3cc7454
                           .group:00000000 wm4.gd32f30x_i2c.h.36.5765e4fd7e67145781f52c3602fdf526
                           .group:00000000 wm4.gd32f30x_pmu.h.37.9dd0def5d1159a6e20d49fadc0da3d91
                           .group:00000000 wm4.gd32f30x_bkp.h.36.74dcfa31c344ae6ddc6f3a850e1b1f1c
                           .group:00000000 wm4.gd32f30x_rtc.h.37.6e2dc4b1c1143d8443b19d8b8578e187
                           .group:00000000 wm4.gd32f30x_sdio.h.36.6dde0ac1ffebc8ac87750ca48ebf5355
                           .group:00000000 wm4.gd32f30x_spi.h.36.761dbcfdf151612384a2a7e1dfbd70a2
                           .group:00000000 wm4.gd32f30x_timer.h.36.aa3a076608594e31d0be360d6248cd0c
                           .group:00000000 wm4.gd32f30x_usart.h.36.c16033d6419d9317c5e1d5c9a4db894a
                           .group:00000000 wm4.gd32f30x_wwdgt.h.37.074fc90df4806e0bcba242ad61cb154f
                           .group:00000000 wm4.gd32f30x_enet.h.36.7f39b2eaaae239e349e809a8bdf838ed
                           .group:00000000 wm4.gd32f30x_exmc.h.36.6a5eb51a45aba96edb0f318836bccfc7
                           .group:00000000 wm4.gd32f30x_misc.h.42.db156db269778329911714882ae58ab3

NO UNDEFINED SYMBOLS
